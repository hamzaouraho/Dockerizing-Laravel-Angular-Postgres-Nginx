version: "3.9"  # optional since v1.27.0
volumes:
    dbbackups:
    postgis-data:
services:

    angular:
        build:
           context: "frontend/angular/"
        image: angular
        container_name: angular
        env_file:
            - "./frontend/angular/.env"
        ports:
            - 5000:3000
        networks: 
            - webapp
    php-server:
        build: ./backend/docker/php
        container_name: php-server
        expose:
            - "9000"
        volumes: 
            - "./backend/gis-api:/var/www/html"
        networks:
            - webapp


    nginx-server:
        build: ./backend/docker/nginx
        ports:
            - "8080:80"
        container_name: nginx
        volumes:
            - "./backend/gis-api:/var/www/html"
        depends_on:
            - php-server
            - pgsql
        networks:
            - webapp
    # postgres:
    #     image: kartoza/postgis:13-3.1
    #     container_name: postgres
    #     volumes:
    #         - "./backend/data_storage/postgres_db:/var/lib/postgresql/data"
    #         - dbbackups:/backups
    #     environment:
    #     # If you need to create multiple database you can add coma separated databases eg gis,data
    #         - POSTGRES_DB=RestApi
    #         - POSTGRES_USER=postgres
    #         - POSTGRES_PASS=postgres
    #         - ALLOW_IP_RANGE=0.0.0.0/0
    #         # Add extensions you need to be enabled by default in the DB. Default are the five specified below
    #         - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    #     ports:
    #         - 25432:5432
    #     restart: on-failure
    #     networks:
    #         - webapp
    #     healthcheck:
    #         test: "exit 0"

    # dbbackups:
    #     image: kartoza/pg-backup:13.0
    #     hostname: pg-backups
    #     container_name: dbbackups
    #     volumes:
    #         - dbbackups:/backups
    #     environment:
    #         - DUMPPREFIX=PG_db
    #         - POSTGRES_USER=postgres
    #         - POSTGRES_PASS=postgres
    #         - POSTGRES_PORT=5432
    #         - POSTGRES_HOST=postgres
    #         - POSTGRES_DBNAME=RestApi
    #     restart: on-failure
    #     networks:
    #         - webapp
    #     depends_on:
    #         postgres:
    #             condition: service_healthy
    # last
    # postgres:
    #     image: postgres:12.3-alpine
    #     container_name: postgres
    #     ports:
    #         - "5432:5432"
    #     volumes: 
    #         - "./backend/data_storage/postgres_db:/var/lib/postgresql/data"
            
    #     restart: unless-stopped
    #     tty: true
    #     environment:
    #         POSTGRES_DATABASE: hamza
    #         # POSTGRES_USER: postgres
    #         POSTGRES_ROOT_PASSWORD: root
    #         MYSQL_SERVICE_NAME: postgres
    #         #- ALLOW_IP_RANGE=hamza2
    #         #- FORCE_SSL=TRUE
    #     networks:
    #         - webapp
    pgsql:
        image: postgres:12.0-alpine
        container_name: laravel-pgsql
        working_dir: /data/pgsql
        volumes:
            - ./postgresql-data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: root
            POSTGRES_DB: RestApi
        ports:
            - 5432:5432
        networks:
            - webapp


networks:
    webapp:

